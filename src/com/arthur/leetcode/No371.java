package com.arthur.leetcode;

/**
 * @title: No371
 * @Author ArthurJi
 * @Date: 2021/4/23 10:58
 * @Version 1.0
 */
public class No371 {
    public int getSum(int a, int b) {
        return (b == 0) ? a : getSum(a ^ b, (a & b) << 1);  //b是进位
    }
}
/*
371. 两整数之和
        不使用运算符 + 和 - ​​​​​​​，计算两整数 ​​​​​​​a 、b ​​​​​​​之和。

        示例 1:

        输入: a = 1, b = 2
        输出: 3
        示例 2:

        输入: a = -2, b = 3
        输出: 1
*/
/*
题目说不能使用运算符 + 和 -，那么我们就要使用其他方式来替代这两个运算符的功能。

        位运算中的加法
        我们先来观察下位运算中的两数加法，其实来来回回就只有下面这四种：


        0 + 0 = 0
        0 + 1 = 1
        1 + 0 = 1
        1 + 1 = 0（进位 1）
        仔细一看，这可不就是相同位为 0，不同位为 1 的异或运算结果嘛~

        异或和与运算操作
        我们知道，在位运算操作中，异或的一个重要特性是无进位加法。我们来看一个例子：


        a = 5 = 0101
        b = 4 = 0100

        a ^ b 如下：

        0 1 0 1
        0 1 0 0
        -------
        0 0 0 1
        a ^ b 得到了一个无进位加法结果，如果要得到 a + b 的最终值，我们还要找到进位的数，把这二者相加。在位运算中，我们可以使用与操作获得进位：


        a = 5 = 0101
        b = 4 = 0100

        a & b 如下：

        0 1 0 1
        0 1 0 0
        -------
        0 1 0 0
        由计算结果可见，0100 并不是我们想要的进位，1 + 1 所获得的进位应该要放置在它的更高位，即左侧位上，因此我们还要把 0100 左移一位，才是我们所要的进位结果。

        那么问题就容易了，总结一下：

        a + b 的问题拆分为 (a 和 b 的无进位结果) + (a 和 b 的进位结果)
        无进位加法使用异或运算计算得出
        进位结果使用与运算和移位运算计算得出
        循环此过程，直到进位为 0

        作者：jalan
        链接：https://leetcode-cn.com/problems/sum-of-two-integers/solution/wei-yun-suan-xiang-jie-yi-ji-zai-python-zhong-xu-y/
        来源：力扣（LeetCode）
        著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。*/
